name: CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Mandatory Security Validation - BLOCKS ALL DEPLOYMENTS IF FAILED
  security-validation:
    name: 🛡️ Mandatory Security Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Set up Python for Checkov
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install security tools
      run: |
        pip install checkov
        sudo apt-get update && sudo apt-get install -y jq

    - name: Run mandatory security validation
      run: |
        chmod +x ./scripts/deploy-security-check.sh
        ./scripts/deploy-security-check.sh

    - name: Upload security validation report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-validation-report
        path: security-validation-report.json

    - name: Comment PR with security results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-report.json')) {
            const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
            const comment = `## = Security Scan Results

            **Secrets Scanning**: ${report.results?.failed_checks?.length || 0} issues found
            **Status**: ${report.results?.failed_checks?.length === 0 ? ' PASSED' : 'L FAILED'}

            ${report.results?.failed_checks?.length > 0 ?
              '**Issues:**\n' + report.results.failed_checks.map(check =>
                `- ${check.check_id}: ${check.file_path}`
              ).join('\n') :
              ' No security issues detected!'
            }`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  # Code quality and testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-validation

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run security tests
      run: npm run test:security

    - name: Install Playwright dependencies
      run: |
        npx playwright install firefox --with-deps

    - name: Run unit tests
      run: npm run test:coverage

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Run integration tests
      run: |
        # Start server in background
        npm start &
        SERVER_PID=$!

        # Wait for server to start
        sleep 5

        # Run basic API tests
        curl -f http://localhost:3000/health || exit 1
        curl -f http://localhost:3000/api || exit 1

        # Stop server
        kill $SERVER_PID

  # Security vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: security-validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate
        npm audit --json > vulnerability-report.json || true

    - name: Upload vulnerability report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: vulnerability-report
        path: vulnerability-report.json

  # Build and deployment readiness
  build:
    name: Build & Deploy Check
    runs-on: ubuntu-latest
    needs: [security-validation, test, vulnerability-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install production dependencies
      run: npm ci --production

    - name: Build application
      run: |
        # Create production build artifacts
        mkdir -p dist
        cp -r src dist/
        cp package*.json dist/
        cp web.config dist/

    - name: Test production build
      run: |
        cd dist
        node src/server.js &
        SERVER_PID=$!
        sleep 5
        curl -f http://localhost:3000/health || exit 1
        kill $SERVER_PID

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-build
        path: dist/

    - name: Security scan of build artifacts
      run: |
        pip install checkov
        checkov --framework secrets --directory dist --output cli

    - name: Run final security validation on build
      run: |
        cd dist
        chmod +x ../scripts/deploy-security-check.sh
        ../scripts/deploy-security-check.sh

  # Notification job
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [security-validation, test, vulnerability-scan, build]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.security-scan.result == 'success' && needs.test.result == 'success' && needs.vulnerability-scan.result == 'success' }}
      run: |
        echo "<� All checks passed! Ready for deployment."
        echo " Security scan: PASSED"
        echo " Tests: PASSED"
        echo " Vulnerability scan: PASSED"

    - name: Notify failure
      if: ${{ needs.security-scan.result == 'failure' || needs.test.result == 'failure' || needs.vulnerability-scan.result == 'failure' }}
      run: |
        echo "L Some checks failed. Please review the results."
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Vulnerability scan: ${{ needs.vulnerability-scan.result }}"
        exit 1