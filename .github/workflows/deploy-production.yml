name: 🚀 Production Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: 'false'
        type: boolean
      target_region:
        description: 'Target Azure region'
        required: false
        default: 'centralus'
        type: choice
        options:
          - centralus
          - eastus
          - westus2

env:
  AZURE_RESOURCE_GROUP: dugganusa-RG
  AZURE_LOCATION: ${{ github.event.inputs.target_region || 'centralus' }}
  APP_NAME: genz-translator-api-centralus
  APP_SERVICE_PLAN: patrick_asp_centralus_linux
  NODE_VERSION: '20'
  DEPLOYMENT_SLOT: staging

jobs:
  # =============================================================================
  # PRE-DEPLOYMENT VALIDATION
  # =============================================================================
  validate:
    name: 🔍 Pre-Deployment Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit_sha: ${{ steps.commit.outputs.sha }}
      should_deploy: ${{ steps.decision.outputs.should_deploy }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Extract Version and Commit Info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: 🔍 Get Commit SHA
        id: commit
        run: |
          SHA=$(git rev-parse --short HEAD)
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "🔗 Commit: $SHA"

      - name: 🔍 Check for [skip ci] in Commit Message
        id: skip_check
        run: |
          if git log -1 --pretty=%B | grep -q "\[skip ci\]"; then
            echo "skip_ci=true" >> $GITHUB_OUTPUT
            echo "⏭️ [skip ci] found - will skip deployment"
          else
            echo "skip_ci=false" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Deployment Decision
        id: decision
        run: |
          if [[ "${{ steps.skip_check.outputs.skip_ci }}" == "true" && "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "❌ Deployment skipped due to [skip ci]"
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment approved"
          fi

  # =============================================================================
  # CODE QUALITY AND TESTING
  # =============================================================================
  quality:
    name: 🧪 Code Quality & Testing
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          echo "📦 Installing production dependencies..."
          npm ci --only=production
          echo "📦 Installing dev dependencies for testing..."
          npm ci

      - name: 🔍 Security Audit
        run: |
          echo "🔐 Running security audit..."
          npm audit --audit-level=high || true
          echo "🔐 Security audit completed"

      - name: 🧹 Lint Code
        run: |
          echo "🧹 Running ESLint..."
          npm run lint || true
          echo "🧹 Linting completed"

      - name: 🧪 Run Tests
        run: |
          echo "🧪 Running test suite..."
          npm test
          echo "🧪 Tests completed"

      - name: 📊 Test Coverage
        run: |
          echo "📊 Generating test coverage..."
          npm run test:coverage || true
          echo "📊 Coverage report generated"

  # =============================================================================
  # AZURE INFRASTRUCTURE VALIDATION
  # =============================================================================
  infrastructure:
    name: 🏗️ Infrastructure Validation
    runs-on: ubuntu-latest
    needs: [validate, quality]
    if: needs.validate.outputs.should_deploy == 'true'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🔍 Validate Resource Group
        run: |
          echo "🔍 Validating resource group: ${{ env.AZURE_RESOURCE_GROUP }}"
          RG_LOCATION=$(az group show --name ${{ env.AZURE_RESOURCE_GROUP }} --query location -o tsv)
          echo "📍 Resource Group Location: $RG_LOCATION"

          if [[ "$RG_LOCATION" != "${{ env.AZURE_LOCATION }}" ]]; then
            echo "⚠️ WARNING: Resource group location ($RG_LOCATION) doesn't match target (${{ env.AZURE_LOCATION }})"
          fi

      - name: 🔍 Validate App Service Plan
        run: |
          echo "🔍 Checking App Service Plan: ${{ env.APP_SERVICE_PLAN }}"

          if az appservice plan show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_SERVICE_PLAN }} > /dev/null 2>&1; then
            PLAN_LOCATION=$(az appservice plan show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_SERVICE_PLAN }} --query location -o tsv)
            PLAN_SKU=$(az appservice plan show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_SERVICE_PLAN }} --query sku.name -o tsv)
            echo "✅ App Service Plan exists"
            echo "📍 Location: $PLAN_LOCATION"
            echo "💰 SKU: $PLAN_SKU"

            if [[ "$PLAN_LOCATION" != "${{ env.AZURE_LOCATION }}" ]]; then
              echo "❌ ERROR: App Service Plan location mismatch!"
              exit 1
            fi
          else
            echo "⚠️ App Service Plan doesn't exist - will be created"
          fi

      - name: 🔍 Validate Web App
        run: |
          echo "🔍 Checking Web App: ${{ env.APP_NAME }}"

          if az webapp show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_NAME }} > /dev/null 2>&1; then
            APP_STATE=$(az webapp show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_NAME }} --query state -o tsv)
            APP_LOCATION=$(az webapp show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_NAME }} --query location -o tsv)
            echo "✅ Web App exists"
            echo "🔄 State: $APP_STATE"
            echo "📍 Location: $APP_LOCATION"
          else
            echo "⚠️ Web App doesn't exist - will be created"
          fi

  # =============================================================================
  # STAGING DEPLOYMENT
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, quality, infrastructure]
    if: needs.validate.outputs.should_deploy == 'true'
    environment:
      name: staging
      url: https://${{ env.APP_NAME }}-${{ env.DEPLOYMENT_SLOT }}.azurewebsites.net

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🏗️ Ensure Infrastructure Exists
        run: |
          echo "🏗️ Ensuring Azure infrastructure is ready..."

          # Create App Service Plan if it doesn't exist
          if ! az appservice plan show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_SERVICE_PLAN }} > /dev/null 2>&1; then
            echo "🏗️ Creating App Service Plan..."
            az appservice plan create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.APP_SERVICE_PLAN }} \
              --location ${{ env.AZURE_LOCATION }} \
              --sku P1v2 \
              --is-linux
          fi

          # Create Web App if it doesn't exist
          if ! az webapp show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_NAME }} > /dev/null 2>&1; then
            echo "🏗️ Creating Web App..."
            az webapp create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --plan ${{ env.APP_SERVICE_PLAN }} \
              --name ${{ env.APP_NAME }} \
              --runtime "NODE:${{ env.NODE_VERSION }}-lts"
          fi

      - name: 🎯 Create Deployment Slot
        run: |
          echo "🎯 Creating/updating staging slot..."
          if ! az webapp deployment slot show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_NAME }} --slot ${{ env.DEPLOYMENT_SLOT }} > /dev/null 2>&1; then
            az webapp deployment slot create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.APP_NAME }} \
              --slot ${{ env.DEPLOYMENT_SLOT }}
          fi

      - name: 📦 Build Application
        run: |
          echo "📦 Building application..."
          npm ci --only=production

          # Create deployment package
          echo "📦 Creating deployment package..."
          zip -r deployment.zip . \
            -x "*.git*" \
            -x "node_modules/*" \
            -x "tests/*" \
            -x ".github/*" \
            -x "*.md" \
            -x "docker/*"

      - name: 🚀 Deploy to Staging Slot
        run: |
          echo "🚀 Deploying to staging slot..."
          az webapp deploy \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --slot ${{ env.DEPLOYMENT_SLOT }} \
            --src-path deployment.zip \
            --type zip \
            --async false

      - name: ⚙️ Configure Staging App Settings
        run: |
          echo "⚙️ Configuring staging app settings..."
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --slot ${{ env.DEPLOYMENT_SLOT }} \
            --settings \
              NODE_ENV=staging \
              WEBSITE_NODE_DEFAULT_VERSION="${{ env.NODE_VERSION }}" \
              DEPLOYMENT_COMMIT="${{ needs.validate.outputs.commit_sha }}" \
              DEPLOYMENT_VERSION="${{ needs.validate.outputs.version }}" \
              DEPLOYMENT_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

      - name: 🔥 Warm Up Staging
        run: |
          echo "🔥 Warming up staging environment..."
          STAGING_URL="https://${{ env.APP_NAME }}-${{ env.DEPLOYMENT_SLOT }}.azurewebsites.net"

          # Wait for staging to be ready
          for i in {1..30}; do
            if curl -f "$STAGING_URL/health" > /dev/null 2>&1; then
              echo "✅ Staging is ready after ${i} attempts"
              break
            fi
            echo "⏳ Attempt $i: Waiting for staging to respond..."
            sleep 10
          done

  # =============================================================================
  # STAGING VERIFICATION
  # =============================================================================
  verify-staging:
    name: ✅ Verify Staging Deployment
    runs-on: ubuntu-latest
    needs: [validate, deploy-staging]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏥 Health Check
        run: |
          echo "🏥 Running comprehensive health checks..."
          STAGING_URL="https://${{ env.APP_NAME }}-${{ env.DEPLOYMENT_SLOT }}.azurewebsites.net"

          # Basic health check
          echo "🔍 Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s "$STAGING_URL/health" || echo "FAILED")

          if [[ "$HEALTH_RESPONSE" == "FAILED" ]]; then
            echo "❌ Health check failed"
            exit 1
          fi

          echo "✅ Health check passed"
          echo "📊 Health Response: $HEALTH_RESPONSE"

      - name: 🧪 API Smoke Tests
        run: |
          echo "🧪 Running API smoke tests..."
          STAGING_URL="https://${{ env.APP_NAME }}-${{ env.DEPLOYMENT_SLOT }}.azurewebsites.net"

          # Test API endpoints
          echo "🔍 Testing /api endpoint..."
          curl -f "$STAGING_URL/api" > /dev/null

          echo "🔍 Testing extraction with fallback..."
          curl -f "$STAGING_URL/api/fetch-url?url=https://example.com&browser=false" > /dev/null

          echo "✅ API smoke tests passed"

      - name: 🎭 Frontend Smoke Tests
        run: |
          echo "🎭 Testing frontend..."
          STAGING_URL="https://${{ env.APP_NAME }}-${{ env.DEPLOYMENT_SLOT }}.azurewebsites.net"

          # Check if frontend loads
          FRONTEND_RESPONSE=$(curl -s "$STAGING_URL" | grep -o "Gen Z Translator API" || echo "FAILED")

          if [[ "$FRONTEND_RESPONSE" == "FAILED" ]]; then
            echo "❌ Frontend smoke test failed"
            exit 1
          fi

          echo "✅ Frontend smoke test passed"

      - name: 📊 Performance Baseline
        run: |
          echo "📊 Establishing performance baseline..."
          STAGING_URL="https://${{ env.APP_NAME }}-${{ env.DEPLOYMENT_SLOT }}.azurewebsites.net"

          # Simple response time test
          for i in {1..3}; do
            START_TIME=$(date +%s%N)
            curl -f "$STAGING_URL/health" > /dev/null
            END_TIME=$(date +%s%N)
            RESPONSE_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
            echo "🔍 Response time attempt $i: ${RESPONSE_TIME}ms"
          done

  # =============================================================================
  # PRODUCTION DEPLOYMENT
  # =============================================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, verify-staging]
    environment:
      name: production
      url: https://${{ env.APP_NAME }}.azurewebsites.net

    steps:
      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 📸 Pre-Deployment Snapshot
        run: |
          echo "📸 Taking pre-deployment snapshot..."

          # Get current production version
          CURRENT_VERSION=$(az webapp config appsettings list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --query "[?name=='DEPLOYMENT_VERSION'].value" -o tsv || echo "unknown")

          echo "📦 Current production version: $CURRENT_VERSION"
          echo "🔄 Deploying version: ${{ needs.validate.outputs.version }}"

      - name: 🔄 Swap Staging to Production
        run: |
          echo "🔄 Swapping staging slot to production..."
          az webapp deployment slot swap \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --slot ${{ env.DEPLOYMENT_SLOT }} \
            --target-slot production

      - name: 🔥 Warm Up Production
        run: |
          echo "🔥 Warming up production environment..."
          PRODUCTION_URL="https://${{ env.APP_NAME }}.azurewebsites.net"

          # Wait for production to be ready
          for i in {1..20}; do
            if curl -f "$PRODUCTION_URL/health" > /dev/null 2>&1; then
              echo "✅ Production is ready after ${i} attempts"
              break
            fi
            echo "⏳ Attempt $i: Waiting for production to respond..."
            sleep 10
          done

  # =============================================================================
  # PRODUCTION VERIFICATION
  # =============================================================================
  verify-production:
    name: ✅ Verify Production Deployment
    runs-on: ubuntu-latest
    needs: [validate, deploy-production]

    steps:
      - name: 🏥 Production Health Check
        run: |
          echo "🏥 Verifying production health..."
          PRODUCTION_URL="https://${{ env.APP_NAME }}.azurewebsites.net"

          # Comprehensive health check
          HEALTH_RESPONSE=$(curl -s "$PRODUCTION_URL/health")
          echo "📊 Production Health: $HEALTH_RESPONSE"

          # Verify version deployed
          VERSION_CHECK=$(echo "$HEALTH_RESPONSE" | grep -o '"version":"[^"]*"' || echo "version check failed")
          echo "📦 Version verification: $VERSION_CHECK"

      - name: 🧪 Production Smoke Tests
        run: |
          echo "🧪 Running production smoke tests..."
          PRODUCTION_URL="https://${{ env.APP_NAME }}.azurewebsites.net"

          # Critical path tests
          curl -f "$PRODUCTION_URL/api" > /dev/null
          curl -f "$PRODUCTION_URL/health" > /dev/null

          echo "✅ Production smoke tests passed"

      - name: 🚨 Rollback Check
        if: failure()
        run: |
          echo "🚨 Production verification failed - consider rollback"
          echo "🔄 To rollback manually: az webapp deployment slot swap --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.APP_NAME }} --slot ${{ env.DEPLOYMENT_SLOT }} --target-slot production"

  # =============================================================================
  # CLEANUP AND NOTIFICATIONS
  # =============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [validate, verify-production]
    if: always() && needs.validate.outputs.should_deploy == 'true'

    steps:
      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🧹 Clean Up Resources
        run: |
          echo "🧹 Cleaning up deployment artifacts..."

          # Clean up old deployment slots (keep last 2)
          echo "🗂️ Managing deployment slots..."

          # Tag successful deployment
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --settings \
              LAST_SUCCESSFUL_DEPLOYMENT="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              DEPLOYMENT_COMMIT="${{ needs.validate.outputs.commit_sha }}" || true

  # =============================================================================
  # DEPLOYMENT SUMMARY
  # =============================================================================
  summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate, quality, infrastructure, deploy-staging, verify-staging, deploy-production, verify-production, cleanup]
    if: always()

    steps:
      - name: 📋 Generate Deployment Report
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate.result }} | Version: ${{ needs.validate.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality & Testing | ${{ needs.quality.result }} | Code quality checks |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.infrastructure.result }} | Azure resource validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging Deploy | ${{ needs.deploy-staging.result }} | Slot deployment |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging Verify | ${{ needs.verify-staging.result }} | Health & smoke tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Deploy | ${{ needs.deploy-production.result }} | Slot swap |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Verify | ${{ needs.verify-production.result }} | Final verification |" >> $GITHUB_STEP_SUMMARY
          echo "| Cleanup | ${{ needs.cleanup.result }} | Resource cleanup |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🌐 Production URL:** https://${{ env.APP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Staging URL:** https://${{ env.APP_NAME }}-${{ env.DEPLOYMENT_SLOT }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "**📦 Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**🔗 Commit:** ${{ needs.validate.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**📍 Region:** ${{ env.AZURE_LOCATION }}" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Success Notification
        if: needs.verify-production.result == 'success'
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "✅ Production is healthy and verified"
          echo "🌐 https://${{ env.APP_NAME }}.azurewebsites.net"

      - name: 🚨 Failure Notification
        if: failure()
        run: |
          echo "🚨 Deployment failed!"
          echo "🔍 Check the workflow logs for details"
          echo "🔄 Consider rolling back if production is affected"