name: 🚀 Production Deployment - ACR to Container Apps

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY_NAME: genztranslatoracrcentralus
  REGISTRY_LOGIN_SERVER: genztranslatoracrcentralus.azurecr.io
  IMAGE_NAME: hacksaws2x4
  CONTAINER_APP_NAME: hacksaws2x4
  RESOURCE_GROUP: dugganusa-RG
  NODE_VERSION: '20.x'

jobs:
  # Build optimized production image for AMD64
  build-and-push:
    name: 🐳 Build & Push to ACR
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: 🛎 Checkout
        uses: actions/checkout@v4

      - name: 🔑 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🔐 Login to ACR
        run: az acr login --name ${{ env.REGISTRY_NAME }}

      - name: 📦 Setup Docker Buildx (AMD64)
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=production,enable={{is_default_branch}}

      - name: 🔨 Build and Push to ACR
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: 📊 Image Details
        run: |
          echo "## 🐳 Container Image Built" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY_LOGIN_SERVER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY

  # Enhanced security validation (non-blocking)
  security-validation:
    name: 🛡️ Security Validation
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: 🛎 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: 🛠️ Setup Security Tools (Cached)
        uses: actions/cache@v4
        id: security-cache
        with:
          path: |
            ~/.local/bin
            ~/.cache/pip
          key: security-tools-${{ runner.os }}-v2
          restore-keys: |
            security-tools-${{ runner.os }}-

      - name: 🔧 Install Security Tools
        if: steps.security-cache.outputs.cache-hit != 'true'
        run: |
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | \
            sh -s -- -b ~/.local/bin v3.90.8

          # Install Semgrep
          python3 -m pip install --user semgrep==1.137.0

          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 🔐 Security Scanning (Non-blocking)
        continue-on-error: true
        run: |
          echo "## 🛡️ Security Validation Results" >> $GITHUB_STEP_SUMMARY

          # NPM Audit
          echo "### 📊 NPM Security Audit" >> $GITHUB_STEP_SUMMARY
          if npm audit --audit-level moderate; then
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Vulnerabilities detected (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi

          # TruffleHog
          echo "### 🐷 Secret Detection" >> $GITHUB_STEP_SUMMARY
          if ~/.local/bin/trufflehog filesystem . --only-verified=false --quiet; then
            echo "✅ No secrets detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Potential secrets found (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi

          # Semgrep
          echo "### 🔍 SAST Analysis" >> $GITHUB_STEP_SUMMARY
          if ~/.local/bin/semgrep --config=auto src/ --quiet --severity=WARNING; then
            echo "✅ SAST analysis passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ SAST issues found (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi

  # Deploy to Azure Container Apps
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-validation]
    if: always() && (needs.build-and-push.result == 'success')
    environment: production
    steps:
      - name: 🔑 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Container Apps
        id: deploy
        run: |
          echo "Deploying to Azure Container Apps..."

          # Get the latest production image
          IMAGE_TAG="${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:production"

          # Update Container App
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $IMAGE_TAG \
            --output table

          # Wait for deployment to complete
          echo "Waiting for deployment to stabilize..."
          sleep 30

          # Get the app URL
          APP_URL=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)

          echo "app-url=https://$APP_URL" >> $GITHUB_OUTPUT

      - name: 🧪 Health Check
        id: health-check
        run: |
          APP_URL="${{ steps.deploy.outputs.app-url }}"

          echo "Testing health endpoint: $APP_URL/health"

          # Test health endpoint
          if curl -f -s "$APP_URL/health" > /dev/null; then
            echo "✅ Health check passed" >> $GITHUB_STEP_SUMMARY
            echo "health-status=healthy" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Health check failed" >> $GITHUB_STEP_SUMMARY
            echo "health-status=unhealthy" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Test API Functionality
        continue-on-error: true
        run: |
          APP_URL="${{ steps.deploy.outputs.app-url }}"

          echo "## 🧪 API Functionality Tests" >> $GITHUB_STEP_SUMMARY

          # Test content extraction
          echo "### 📊 Content Extraction Test" >> $GITHUB_STEP_SUMMARY
          if curl -s -X POST "$APP_URL/extract" \
               -H "Content-Type: application/json" \
               -d '{"url": "https://nypost.com"}' | grep -q "success"; then
            echo "✅ Content extraction working" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Content extraction issue (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Application URL**: ${{ steps.deploy.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Status**: ${{ steps.health-check.outputs.health-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:production" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: linux/amd64 (Azure optimized)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **hacksaws2x4 v3.0.0 deployed successfully!**" >> $GITHUB_STEP_SUMMARY

  # Post-deployment monitoring
  post-deploy:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && (needs.deploy.result == 'success')
    steps:
      - name: 🔑 Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 📈 Container App Status
        run: |
          echo "## 📊 Container App Status" >> $GITHUB_STEP_SUMMARY

          # Get detailed status
          az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "{
              name: name,
              status: properties.runningStatus,
              replicas: properties.template.scale,
              image: properties.template.containers[0].image,
              cpu: properties.template.containers[0].resources.cpu,
              memory: properties.template.containers[0].resources.memory
            }" \
            --output table >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Recent Logs Sample
        continue-on-error: true
        run: |
          echo "## 📝 Recent Application Logs" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          az containerapp logs show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --tail 10 \
            --follow false >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Logs not available yet"

          echo '```' >> $GITHUB_STEP_SUMMARY