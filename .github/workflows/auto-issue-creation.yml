name: 🐛 Auto-Create Issues for Pipeline Failures

on:
  workflow_run:
    workflows:
      - "🚀 Build, Scan & Deploy - Consolidated Pipeline"
      - "🚀 Production Deployment - ACR to Container Apps"
    types:
      - completed

jobs:
  create-failure-issue:
    name: 📋 Create Issue for Pipeline Failure
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}

    permissions:
      issues: write
      contents: read
      actions: read

    steps:
      - name: 🛎 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Check for Existing Issue
        id: check-issue
        run: |
          RUN_ID="${{ github.event.workflow_run.id }}"

          # Check if issue already exists
          EXISTING_ISSUE=$(gh issue list \
            --search "Pipeline Failure: $RUN_ID in:title" \
            --json number \
            --jq '.[0].number // empty')

          if [ -n "$EXISTING_ISSUE" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "issue_number=$EXISTING_ISSUE" >> $GITHUB_OUTPUT
            echo "⚠️ Issue already exists: #$EXISTING_ISSUE"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🆕 No existing issue found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Create Pipeline Failure Issue
        if: steps.check-issue.outputs.exists == 'false'
        run: |
          RUN_ID="${{ github.event.workflow_run.id }}"
          TITLE="${{ github.event.workflow_run.display_title }}"
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          WORKFLOW="${{ github.event.workflow_run.name }}"
          DATE="${{ github.event.workflow_run.created_at }}"
          RUN_URL="${{ github.event.workflow_run.html_url }}"
          REPO="${{ github.repository }}"

          # Create comprehensive failure issue
          ISSUE_URL=$(gh issue create \
            --title "🚨 Pipeline Failure: $TITLE (Run $RUN_ID)" \
            --body "$(cat <<EOF
          ## 🚨 Pipeline Failure Report

          **Run ID:** $RUN_ID
          **Workflow:** $WORKFLOW
          **Commit:** $TITLE
          **Branch:** $BRANCH
          **Date:** $DATE
          **Repository:** $REPO

          ### 🔍 Failure Details
          The pipeline failed during execution. This issue was automatically created to track the failure and resolution.

          ### 📊 Impact Assessment
          - ⛔ Blocking deployment to production
          - 🚫 Preventing builds and releases
          - 🔄 Development workflow interruption
          - 📈 Potential impact on delivery timeline

          ### 🔗 Useful Links
          - **🔍 Run Details:** $RUN_URL
          - **📋 View Logs:** \`gh run view $RUN_ID --log\`
          - **🔄 Re-run Failed Jobs:** \`gh run rerun $RUN_ID --failed\`
          - **📊 All Runs:** https://github.com/$REPO/actions

          ### 🛠️ Resolution Checklist
          - [ ] 🔍 Root cause identified from logs
          - [ ] 🔧 Fix implemented and tested locally
          - [ ] ✅ Fix verified in subsequent pipeline run
          - [ ] 📚 Documentation updated (if needed)
          - [ ] 🎯 Prevention measures implemented
          - [ ] ✅ Issue resolved and closed

          ### 📝 Investigation Steps
          1. **Review Logs:** \`gh run view $RUN_ID --log\`
          2. **Check Recent Changes:** Compare with last successful run
          3. **Test Locally:** Reproduce the issue in development
          4. **Implement Fix:** Apply necessary code or configuration changes
          5. **Verify Resolution:** Ensure fix works in next pipeline run

          ### 🏷️ Labels & Priority
          - **Priority:** High (blocking deployment)
          - **Type:** Pipeline/CI-CD Issue
          - **Status:** Needs Investigation

          ---

          **🤖 Auto-generated by pipeline failure detection**
          **⏰ Created:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **🔧 Next Action:** Review logs and implement fix
          EOF
          )" \
            --label "bug,ci/cd,high-priority")

          echo "✅ Issue created: $ISSUE_URL"

          # Add comment with quick commands
          gh issue comment $(basename $ISSUE_URL) --body "$(cat <<EOF
          ## 🚀 Quick Commands for Resolution

          **View detailed logs:**
          \`\`\`bash
          gh run view $RUN_ID --log
          \`\`\`

          **Re-run failed jobs only:**
          \`\`\`bash
          gh run rerun $RUN_ID --failed
          \`\`\`

          **Check similar recent failures:**
          \`\`\`bash
          gh run list --status=failure --limit 5
          \`\`\`

          **Create issue for other failures:**
          \`\`\`bash
          ./scripts/create-failure-issue.sh [RUN_ID]
          \`\`\`
          EOF
          )"

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Update Existing Issue
        if: steps.check-issue.outputs.exists == 'true'
        run: |
          ISSUE_NUM="${{ steps.check-issue.outputs.issue_number }}"
          RUN_ID="${{ github.event.workflow_run.id }}"
          DATE="${{ github.event.workflow_run.created_at }}"

          gh issue comment $ISSUE_NUM --body "$(cat <<EOF
          ## 🔄 Additional Pipeline Failure

          **New Failure Date:** $DATE
          **Run ID:** $RUN_ID
          **Status:** Issue still occurring - needs continued investigation

          This indicates the issue was not fully resolved from the previous failure.

          **Recommended Actions:**
          1. Review if previous fix was properly applied
          2. Check for new changes that might have caused regression
          3. Consider if issue is intermittent vs. persistent

          EOF
          )"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}