name: 🚀 Release Management
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  NODE_VERSION: '20.x'

jobs:
  # Validate before release
  pre-release-validation:
    name: 🔍 Pre-Release Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: 🛎 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔐 Security validation
        run: |
          npm run security:audit
          npm run test:security

      - name: 🧪 Run tests
        run: npm run test:ci

      - name: 📋 Lint code
        run: npm run lint

      - name: 📄 Generate SBOM
        run: |
          npm run build:sbom
          echo "## 📄 SBOM Generated" >> $GITHUB_STEP_SUMMARY
          echo "- JSON: $(wc -l < sbom.json) lines" >> $GITHUB_STEP_SUMMARY
          echo "- XML: $(wc -l < sbom.xml) lines" >> $GITHUB_STEP_SUMMARY

      - name: 🏷️ Extract version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=v$VERSION" >> $GITHUB_OUTPUT
            if [[ "$VERSION" == *"-"* ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "version=manual-${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          fi

  # Create GitHub release
  create-release:
    name: 🚀 Create GitHub Release
    runs-on: ubuntu-latest
    needs: pre-release-validation
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      discussions: write
    steps:
      - name: 🛎 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # If no previous tag, get all commits
          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## 🚀 What's New in ${{ needs.pre-release-validation.outputs.version }}

          ### 📋 Changes
          $COMMITS

          ### 🔧 Technical Details
          - **Node.js**: ${{ env.NODE_VERSION }}
          - **Security**: All validation gates passed ✅
          - **Tests**: Full test suite passed ✅
          - **Deployment**: Azure Container Apps ready ✅

          ### 📚 Documentation
          - [API Documentation](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/README.md)
          - [Security Implementation](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/SECURITY.md)
          - [Deployment Guide](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/docs/DEPLOYMENT.md)

          ### 🛡️ Security
          This release has been validated through our comprehensive security pipeline:
          - ✅ Secrets detection (TruffleHog, Checkov)
          - ✅ SAST analysis (Semgrep, ESLint security)
          - ✅ Dependency scanning (NPM audit, Snyk)
          - ✅ Container security (Trivy scanning)
          - ✅ License compliance validation

          EOF

          echo "Generated release notes:"
          cat release_notes.md

      - name: 📄 Generate SBOM for release
        run: |
          npm ci
          npm run build:sbom

      - name: 🏷️ Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: hacksaws2x4 ${{ needs.pre-release-validation.outputs.version }}
          body_path: release_notes.md
          files: |
            sbom.json
            sbom.xml
          prerelease: ${{ needs.pre-release-validation.outputs.is_prerelease }}
          generate_release_notes: true
          make_latest: ${{ needs.pre-release-validation.outputs.is_prerelease == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Manual version bump workflow
  version-bump:
    name: 📈 Version Bump
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: 🛎 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔐 Pre-bump validation
        run: |
          npm run lint
          npm run test:security
          npm run test:ci

      - name: 📈 Bump version
        id: bump
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Bump version based on input
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT

          # Commit version bump
          git add package.json package-lock.json
          git commit -m "🔢 bump: version $NEW_VERSION

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

          # Create and push tag
          git tag -a "v$NEW_VERSION" -m "🚀 Release v$NEW_VERSION

          Automated ${{ github.event.inputs.version_type }} version bump.

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

          git push origin main
          git push origin "v$NEW_VERSION"

      - name: 📢 Version bump summary
        run: |
          echo "## 📈 Version Bump Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: ${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created**: ${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release workflow will automatically trigger to create the GitHub release." >> $GITHUB_STEP_SUMMARY

  # Update package registries (future enhancement)
  publish-packages:
    name: 📦 Publish Packages
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    steps:
      - name: 🛎 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Package audit
        run: |
          echo "## 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Name**: $(node -p 'require("./package.json").name')" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $(node -p 'require("./package.json").version')" >> $GITHUB_STEP_SUMMARY
          echo "- **Description**: $(node -p 'require("./package.json").description')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📝 Package publishing can be enabled by setting up NPM_TOKEN secret." >> $GITHUB_STEP_SUMMARY

      # Uncomment when ready to publish to NPM
      # - name: 📰 Publish to NPM
      #   run: npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}